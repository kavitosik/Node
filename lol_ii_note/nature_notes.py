import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import os
import json
from datetime import datetime
from PIL import Image, ImageTk
import webbrowser

class NatureNotesApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏")
        self.root.geometry("800x600")
        self.root.configure(bg="#e8f5e9")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–º–µ—Ç–æ–∫, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        self.notes_dir = "nature_notes"
        if not os.path.exists(self.notes_dir):
            os.makedirs(self.notes_dir)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã
        self.load_nature_icons()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
        self.load_notes_list()
    
    def load_nature_icons(self):
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Ç–∏ –∫ –≤–∞—à–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–∫–æ–Ω–∫–∏, –Ω–æ —Å –∑–µ–ª–µ–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            self.tree_icon = self.create_colored_icon("üå≥", "#2e7d32")
            self.leaf_icon = self.create_colored_icon("üçÉ", "#388e3c")
            self.flower_icon = self.create_colored_icon("üå∏", "#d81b60")
            self.bird_icon = self.create_colored_icon("üê¶", "#1976d2")
        except:
            # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç–∫–∏
            self.tree_icon = "üå≥"
            self.leaf_icon = "üçÉ"
            self.flower_icon = "üå∏"
            self.bird_icon = "üê¶"
    
    def create_colored_icon(self, text, color):
        # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        image = Image.new('RGBA', (30, 30), (0, 0, 0, 0))
        return image  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    def create_widgets(self):
        # –°—Ç–∏–ª—å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        style = ttk.Style()
        style.configure("Nature.TFrame", background="#e8f5e9")
        style.configure("Nature.TLabel", background="#e8f5e9", foreground="#2e7d32", font=('Helvetica', 10))
        style.configure("Nature.TButton", background="#81c784", foreground="#1b5e20", font=('Helvetica', 10))
        style.map("Nature.TButton", background=[('active', '#66bb6a')])
        
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, style="Nature.TFrame")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
        left_panel = ttk.Frame(main_frame, style="Nature.TFrame", width=200)
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        
        ttk.Label(left_panel, text="–ú–æ–∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏", style="Nature.TLabel", 
                 font=('Helvetica', 12, 'bold')).pack(pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(left_panel, style="Nature.TFrame")
        btn_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(btn_frame, text="–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", command=self.new_note, 
                  style="Nature.TButton", image=self.flower_icon, compound=tk.LEFT).pack(fill=tk.X, pady=2)
        ttk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", command=self.delete_note, 
                  style="Nature.TButton", image=self.leaf_icon, compound=tk.LEFT).pack(fill=tk.X, pady=2)
        ttk.Button(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_note, 
                  style="Nature.TButton", image=self.tree_icon, compound=tk.LEFT).pack(fill=tk.X, pady=2)
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
        self.notes_list = tk.Listbox(left_panel, bg="#c8e6c9", fg="#1b5e20", 
                                    selectbackground="#81c784", font=('Helvetica', 10))
        self.notes_list.pack(fill=tk.BOTH, expand=True)
        self.notes_list.bind('<<ListboxSelect>>', self.load_note)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        right_panel = ttk.Frame(main_frame, style="Nature.TFrame")
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # –ü–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        ttk.Label(right_panel, text="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:", style="Nature.TLabel").pack(anchor=tk.W)
        self.title_entry = ttk.Entry(right_panel, font=('Helvetica', 12))
        self.title_entry.pack(fill=tk.X, pady=(0, 10))
        
        # –ü–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
        ttk.Label(right_panel, text="–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:", style="Nature.TLabel").pack(anchor=tk.W)
        self.content_text = scrolledtext.ScrolledText(right_panel, wrap=tk.WORD, 
                                                     bg="#f1f8e9", fg="#1b5e20", 
                                                     font=('Helvetica', 11), padx=5, pady=5)
        self.content_text.pack(fill=tk.BOTH, expand=True)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = ttk.Label(self.root, text="–ì–æ—Ç–æ–≤–æ", relief=tk.SUNKEN, 
                                  anchor=tk.W, style="Nature.TLabel")
        self.status_bar.pack(fill=tk.X, side=tk.BOTTOM, ipady=2)
        
        # –ú–µ–Ω—é
        self.create_menu()
    
    def create_menu(self):
        menubar = tk.Menu(self.root)
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menubar, tearoff=0, bg="#e8f5e9", fg="#2e7d32")
        file_menu.add_command(label="–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", command=self.new_note, accelerator="Ctrl+N")
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_note, accelerator="Ctrl+S")
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        
        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = tk.Menu(menubar, tearoff=0, bg="#e8f5e9", fg="#2e7d32")
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.about)
        help_menu.add_command(label="–°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏—Ä–æ–¥–µ", command=self.nature_tips)
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        
        self.root.config(menu=menubar)
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.root.bind('<Control-n>', lambda e: self.new_note())
        self.root.bind('<Control-s>', lambda e: self.save_note())
    
    def load_notes_list(self):
        self.notes_list.delete(0, tk.END)
        try:
            notes = os.listdir(self.notes_dir)
            for note in notes:
                if note.endswith('.json'):
                    self.notes_list.insert(tk.END, note[:-5])
        except Exception as e:
            self.show_status(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫: {str(e)}")
    
    def new_note(self):
        self.title_entry.delete(0, tk.END)
        self.content_text.delete(1.0, tk.END)
        self.show_status("–°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞...")
    
    def save_note(self):
        title = self.title_entry.get().strip()
        content = self.content_text.get(1.0, tk.END).strip()
        
        if not title:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
            return
        
        note_data = {
            "title": title,
            "content": content,
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "updated_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        try:
            with open(os.path.join(self.notes_dir, f"{title}.json"), 'w', encoding='utf-8') as f:
                json.dump(note_data, f, ensure_ascii=False, indent=2)
            self.show_status(f"–ó–∞–º–µ—Ç–∫–∞ '{title}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            self.load_notes_list()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É: {str(e)}")
    
    def load_note(self, event=None):
        try:
            selected = self.notes_list.curselection()
            if not selected:
                return
            
            title = self.notes_list.get(selected[0])
            with open(os.path.join(self.notes_dir, f"{title}.json"), 'r', encoding='utf-8') as f:
                note_data = json.load(f)
            
            self.title_entry.delete(0, tk.END)
            self.title_entry.insert(0, note_data["title"])
            self.content_text.delete(1.0, tk.END)
            self.content_text.insert(1.0, note_data["content"])
            self.show_status(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ '{title}'")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–º–µ—Ç–∫—É: {str(e)}")
    
    def delete_note(self):
        selected = self.notes_list.curselection()
        if not selected:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        title = self.notes_list.get(selected[0])
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É '{title}'?"):
            try:
                os.remove(os.path.join(self.notes_dir, f"{title}.json"))
                self.show_status(f"–ó–∞–º–µ—Ç–∫–∞ '{title}' —É–¥–∞–ª–µ–Ω–∞")
                self.load_notes_list()
                self.new_note()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É: {str(e)}")
    
    def about(self):
        about_text = """–ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ v1.0

–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∞—à–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ –ø—Ä–∏—Ä–æ–¥–æ–π.
–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏, –∏–¥–µ–∏ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º —É–¥–æ–±–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –∫–∞–∫ –¥–Ω–µ–≤–Ω–∏–∫ –ø—Ä–∏—Ä–æ–¥—ã, –∑–∞–ø–∏—Å–Ω—É—é –∫–Ω–∏–∂–∫—É –Ω–∞—Ç—É—Ä–∞–ª–∏—Å—Ç–∞
–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –º—ã—Å–ª–µ–π –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏—Ä–æ–¥—ã."""
        
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
    
    def nature_tips(self):
        webbrowser.open("https://www.nature.org/en-us/about-us/who-we-are/our-science/nature-tips/")
    
    def show_status(self, message):
        self.status_bar.config(text=message)
        self.root.after(5000, lambda: self.status_bar.config(text="–ì–æ—Ç–æ–≤–æ"))

if __name__ == "__main__":
    root = tk.Tk()
    app = NatureNotesApp(root)
    root.mainloop()